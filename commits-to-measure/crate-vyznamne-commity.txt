commit f6c3d156e826c811d2da170b8ae36f67be102e54
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Thu May 11 15:42:16 2023 +0300

    Improve performance of AVG(<interval>) aggregation

    Instead of using BigInteger which will create new object for every
    addition (and subtraction), use an array of longs, where each value
    represents one of the Period units (years, months, ..., millis).

    At the end, use a `OverflowAwareMutableLong` to calculate the total
    sum of millis and divide by the count of entries (rows) to get back
    a long used to construct the returned `Period` value of the `AVG` agg.

    Also add a JMH benchmark method on top of the existing one testing
    the `SUM` aggregation on intervals.

    Follows: #14058

commit 5ad19461d9bbdfd812586612f3598ef91fb1d529
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Thu May 11 15:37:21 2023 +0300

    Fix calculation for years to use 365 days

    It's not so important for the current usage (comparisons) since the same
    calculation is applied to both periods, but to be 100% correct, changed
    `12 * 30 * millis_per_day` to `365 * millis_per_day`.

commit 30081686c6e38b3b20817d86a3a38eb652c8625a
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Thu May 11 08:45:16 2023 +0300

    Improve performance for Interval comparisons

    Instead of using the custom normalization for all units, it turns
    out that using our custom `toStandardDuration()` is quite faster.

    Follows: #14081

commit df0635dec721861d1f9f5fbde4e9e8647bfebc13
Author: Marios Trivyzas <5058131+matriv@users.noreply.github.com>
Date:   Wed May 10 18:26:12 2023 +0300

    docs: Add NOTE that `index off` cannot be used with parted cols (#14115)

    Closes: #13998
-------------------------------------------------------------------------------------

commit 5ad19461d9bbdfd812586612f3598ef91fb1d529
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Thu May 11 15:37:21 2023 +0300

    Fix calculation for years to use 365 days

    It's not so important for the current usage (comparisons) since the same
    calculation is applied to both periods, but to be 100% correct, changed
    `12 * 30 * millis_per_day` to `365 * millis_per_day`.

commit 30081686c6e38b3b20817d86a3a38eb652c8625a
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Thu May 11 08:45:16 2023 +0300

    Improve performance for Interval comparisons

    Instead of using the custom normalization for all units, it turns
    out that using our custom `toStandardDuration()` is quite faster.

    Follows: #14081

commit df0635dec721861d1f9f5fbde4e9e8647bfebc13
Author: Marios Trivyzas <5058131+matriv@users.noreply.github.com>
Date:   Wed May 10 18:26:12 2023 +0300

    docs: Add NOTE that `index off` cannot be used with parted cols (#14115)

    Closes: #13998

---------------------------------------------------------------------------

commit 6a2b489d9b5691f9bc517e312c86814d4a4f8b07
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Apr 12 12:01:18 2023 +0200

    Remove unused `filtered` and shallow methods from Queries

commit 50e3ed3a43f7a85d52c6cd96791a4fe76c941ba8
...skipping...
    Seems to improve performance a bit:

        Q: SELECT count(*) FROM few_null WHERE o IS NOT NULL;
        C: 1
        | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
        |   V1    |     1330.532 ± 1027.441 |      7.224 |    920.727 |   2204.921 |   2549.247 |
        |   V2    |      752.898 ±  554.113 |      3.360 |    625.463 |   1086.822 |   1818.410 |
        ├---------┴-------------------------┴------------┴------------┴------------┴------------┘
        |               -  55.45%                           -  38.19%
        There is a 86.50% probability that the observed difference is not random, and the best estimate of that difference is 55.45%
        The test has no statistical significance

        Q: SELECT count(*) FROM many_null WHERE o IS NOT NULL;
        C: 1
        | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
        |   V1    |     2512.322 ± 1464.079 |    286.413 |   1942.338 |   4013.377 |   4079.917 |
        |   V2    |     2301.180 ± 1474.545 |    640.924 |   1676.863 |   3881.117 |   3944.891 |
        ├---------┴-------------------------┴------------┴------------┴------------┴------------┘
        |               -   8.77%                           -  14.67%
        There is a 24.83% probability that the observed difference is not random, and the best estimate of that difference is 8.77%
        The test has no statistical significance

        System/JVM Metrics (durations in ms, byte-values in MB)
            |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC
            |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total
         V1 |  147     2.10     1.22 |    0     0.00     0.00 |     4295      880 |  8856.30     337434
         V2 |  138     2.04     1.38 |    0     0.00     0.00 |     4295      733 | 11518.92     347249

commit 5b6458b20779a1429fa5724c447bbb9b779298e9
Author: Robert Palmer <robd003@gmail.com>
Date:   Wed Jan 4 01:07:01 2023 -0500

    Update PostgreSQL server version reported in pgwire to 14

    https://github.com/crate/crate/issues/13418

commit 5b73ac03409c41acb51b4efd9f58d68c6bffb6b9
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Tue Apr 11 11:18:00 2023 +0300

    Add CAST support for LIMIT and OFFSET

    Allow both `CAST(<value> AS <datatype>)` and `<value>::<datatype>` expressions.
    Invalid datatypes would throw errors during either from the `ExpressionAnalyzer`
    if the resulting type of the cast cannot be converted to an integer,
    or during symbol normalization, if the actual runtime value cannot be converted
    to an integer.

    Closes: #13835

...skipping...


    The idea was that they'd get pruned if not required, but we didn't
    prune columns of a scalar-subquery. This led to a ~5%(?) performance
    decrease on some of our benchmarks (`in_subquery.toml`).

commit 4a4848d9b9c47e4b3e5a00fb4ca0e19e2c11828b
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Tue Mar 28 08:43:31 2023 +0200

    Remove undocumented index.store.preload setting

    `getPreload` and `setPreload(boolean)` are deprecated. There is a new
    `setPreload(BiPredicate<String, IOContext> preload)` that replaces the
    `boolean` version and we could adapt the code, but given that the
    setting is not documented this instead removes the functionality
    altogether.

commit da83f1eb1d70462d326946a8aa46955e81080f7f
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Mar 29 08:18:35 2023 +0200

    Don't create ReaderContext per row in ScoreDocRowFunction

    Fixes a performance regression caused by https://github.com/crate/crate/pull/13881

    The deprecated `reader.document()` version internally uses a
    thread-local `StoredFieldsReader`. The new code path that goes through
    `reader.storedFields()` cloned a new instance each time.

--------------------------------------------------------------------------------------

commit 270b1bd3db98ccd7e2427c7f5a8137d47477b5a1
Author: Michael Kleen <michael.kleen@crate.io>
Date:   Tue Mar 7 11:12:12 2023 +0100

    Merge Join.Type and JoinType

commit 03c913ecc91043b1cecdff738dd7bdea07857a9b
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Tue Mar 7 10:36:31 2023 +0100

    Migrate ObjectColumnTest to assertj
...skipping...
    and such will improve performance.

commit f626ec8918422ca0cb6ada5aa7fc601bbbfc53fa
Author: Marios Trivyzas <matriv@gmail.com>
Date:   Tue Feb 28 12:17:43 2023 +0200

    tests: Replace contains with containsExactly

    In some cases, `contains` was used instead of `containsExactly` during
    the migration to assertj. To prevent from hiding failures (regressions)
    change to `containsExactly`.

----------------------------------------------------------------------------------------

commit a9ae6e07bfafea8771f559122f5330a89793748b
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Mon Jul 4 15:37:11 2022 +0200

    Support character type in array_length queries

    Follow up to https://github.com/crate/crate/pull/12672
    Spotted this while working on https://github.com/crate/crate/pull/12696

    We had a test for `array_length` that goes through all types,
    but unfortunately it used `array_length(..) >= 2` as query which doesn't
    trigger the `NumTermsPerDocQuery` path but instead uses the
    `GenericFunctionQuery`.

    Changing the query to `> 1` makes it test the specialized code path.

commit 43a996010438ab8784c19269cab14932e02d3a6a
...skipping...
    Enabling terms dict compression by default has a significant performance
    cost on several query patterns.

    This re-adds the best-speed mode based on https://github.com/apache/lucene/commit/a7a02519f0a5652110a186f4909347ac3349092d

        # Results (server side duration in ms)
        V1: 5.0.0-41d5e54eda11ac1ac80972865a4657faa0d44394
        V2: 5.0.0-fd94871ae11cceb04daa0e16ebc5e310257e6de4

        Q: select t1."sourceIP" from uservisits_large t1 inner join uservisits_small t2 on t1."sourceIP" = t2."sourceIP" limit 1000
        C: 1
        | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
        |   V1    |      948.176 ±  107.654 |    866.460 |    929.739 |    950.093 |   1368.909 |
        |   V2    |      324.894 ±   65.198 |    270.635 |    296.170 |    346.000 |    531.837 |
        ├---------┴-------------------------┴------------┴------------┴------------┴------------┘
        |               -  97.92%                           - 103.36%
        There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 97.92%
        The test has statistical significance

commit 5f0d8a0792f5c6fa2f90f42518b39abb242f21c2
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Jun 8 13:50:24 2022 +0200

    Copy Lucene90DocValuesFormat from Lucene

    This is a 1:1 copy with re-formatting to make checkstyle happy.

--------------------------------------------------------------------------------

commit e2d3c72eccb0f2e8ce609454981f3b6e1d32f61a
Author: Niklas Schmidtmer <niklas@crate.io>
Date:   Fri Jul 23 10:26:12 2021 +0200

    Add a missing backtick to cross-reference

commit acf4e76fd835d6a7b61ddfa7fddd2138e671f0d2
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Jul 21 12:23:58 2021 +0200

    Add a JSON type

    Closes https://github.com/crate/crate/issues/11347

...skipping...
    Lucene 8.9.0 caused a performance regression on the benchmark
    `select hyperloglog_distinct("cCode") from uservisits` causing
    the doc values decompression running much slower introduced by the
    change https://issues.apache.org/jira/browse/LUCENE-9663. We
    should therefore release 4.6 with Lucene 8.8.2 and investigate
    further on the regression.

    V1: 4.6.0-b227e962b16a58e5900e5c770777e432ec66cae9
    V2: 4.6.0-600c7c866f49825f762b4376aa1059600ecaef7c
    Q: select hyperloglog_distinct("cCode") from uservisits
    C: 1
    | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
    |   V1    |      403.000 ±  103.730 |    355.374 |    389.946 |    392.092 |   1118.239 |
    |   V2    |      989.173 ±  129.581 |    941.106 |    966.361 |    977.820 |   1881.523 |
    ├---------┴-------------------------┴------------┴------------┴------------┴------------┘
    |               +  84.21%                           +  85.00%
    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 84.21%
    The test has statistical significance

commit 4216e0870679220d3467bd39b0ad6668e4f08f5d
Author: jweberpm <85930556+jweberpm@users.noreply.github.com>
Date:   Tue Jul 6 13:29:41 2021 +0200

    fixed description of scalar function array_avg

    description of the change should have said average is returned

-----------------------------------------------------------------------------------------
commit ed73dcf1b16c7aca3b7de7220c61a7abfbe51e56
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Mon Jan 25 17:39:47 2021 +0100

    Remove Multimap from FetchPhase

    Relates to https://github.com/crate/crate/issues/10510

commit 2361f54bead06e0d827c0bb134420f93100e7224
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Mon Jan 25 17:28:00 2021 +0100
...skipping...
    This can improve performance a lot if there is GC pressure.

commit 0aa110e1baeb739448fa2118c22680c0c208b5df
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Jan 13 11:59:54 2021 +0100

    Include real table_oid and attr_num in RowDescription message

    Closes https://github.com/crate/crate/issues/10893

commit 8a4ffcebe7e0cb296cd215165c157c5a6d910d05
Author: Sebastian Utz <su@rtme.net>
Date:   Fri Jan 15 17:10:15 2021 +0100

    Add compile support to ToChar function

    If the given pattern argument is a literal, we can parse it upfront
    using the compile scalar API instead of parsing it per row.
    This greatly improves performance.

commit 1d63cccded392eb54860e1d2c73afb4ddd7786de
Author: Andreas Motl <andreas.motl@crate.io>
Date:   Fri Jan 15 15:20:36 2021 +0100

    Add release notes item about the JNA version bump
-----------------------------------------------------------------------

commit ae18e46b1adb0778538e48b1b1a742289512cad4
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Aug 12 17:00:37 2020 +0200

    bp: Clarify some ToXContent implementations behaviour

commit b381931bf940c042f7c952ca16f8e66c45ea11e8
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Aug 12 16:40:47 2020 +0200

    bp: Do not trim unsafe commits when open readonly engine

    https://github.com/elastic/elasticsearch/commit/3ec0cc5f8ed0567593bf1bc2352ff164c2de662e

...skipping...
    Improves the performance in case of concurrent queries:

    Before:

        cr8 timeit -s "select * from sys.health" -w 0 -r 5000 -c 25
        Runtime (in ms):
            mean:    53.955 ± 0.557
            min/max: 51.546 → 436.973
        Percentile:
            50:   52.646 ± 20.100 (stdev)
            95:   54.556
            99.9: 436.960

    After:

        cr8 timeit -s "select * from sys.health" -w 0 -r 5000 -c 25
        Runtime (in ms):
            mean:    27.546 ± 0.580
            min/max: 0.174 → 58.555
        Percentile:
            50:   19.214 ± 20.935 (stdev)
            95:   54.996
            99.9: 57.777

commit fddf56411c06192c93079ccb48f9ea355c9efb65
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Jul 29 11:04:56 2020 +0200

    bp: Remove isRecovering method from Engine

    https://github.com/elastic/elasticsearch/commit/9df6cbef9e4516c8a07f8c559652c51c49605def

---------------------------------------------------------------------------------------------
commit e7695886044540030b1a50f82f33a52d99c9b1be
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Tue Jul 28 14:22:54 2020 +0200

    bp: Refactor index engines to manage readers instead of searchers

    https://github.com/elastic/elasticsearch/commit/399d53e5c03ae4157d9ba107d01fbecfed758972

commit 217c8ab629116234b2d023844ad0962302125c4d
Author: Mathias Fussenegger <f.mathias@zignar.net>
...skipping...
    Fix performance regression; execute ORDER BY w/o LIMIT with QTF

    In theory a normal `Order -> Collect` should be just as fast or faster
    than a `Fetch -> Order -> Collect`, but it turns out that due to how
    currently the sorted merge, it is more expensive on a full row than a
    narrow row with just the fetch id.

    Part of the reason is that the `*SortedMergeIterator` implementations
    use a `peek`, which triggers multiple evaluations of a `Row`. For
    example the `apply` of the `ScoreDocRowFunction` is called multiple
    times.

    Fixing this in the execution layer may be a bit more involved, so this
    applies the fetch-rewrite also to some more patterns.

        V1: 4.3.0-d162b7a8731762aacd4bdfcf6df20e6342ed6154
        V2: 4.3.0-1ed3aa43bd5cd671fc332fbcc8c7432671a3b48b

        Q: select * from uservisits where "searchWord" = 'hardnose' order by "visitDate" desc
        C: 1
        | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
        |   V1    |      265.018 ±   21.618 |    222.775 |    262.301 |    271.916 |    641.156 |
        |   V2    |       55.767 ±   23.288 |     45.291 |     52.272 |     58.345 |    552.883 |
        ├---------┴-------------------------┴------------┴------------┴------------┴------------┘
        |               - 130.46%                           - 133.53%
        There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 130.46%
        The test has statistical significance

        System/JVM Metrics (durations in ms, byte-values in MB)
            |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC
            |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total
         V1 |  504     4.28     3.93 |  490    43.76    45.05 |     2147      387 |   751.03     103980
         V2 |   37     6.19     5.45 |   27    45.51    44.09 |     2147      800 |   823.33      27122

    (The ~55 mean here is about the same we had in 4.1)

commit 05a5c1617db2c8ca543518ee196b93dce7fa938a
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Thu Jul 23 10:37:11 2020 +0200

    Fix statement classification to include sources of fetch operators

----------------------------------------------------------------------------------------------
commit 866237c92f7014646224bac44d5bb05c5aae204b
Author: Ruslan Kovalov <ruslan@crate.io>
Date:   Fri Apr 24 13:24:02 2020 +0200

    Use the new func registry for the _values function.

commit d6a74bbff6df2cc810c789367407f56bf7237bac
Author: Ruslan Kovalov <ruslan@crate.io>
Date:   Tue Apr 28 15:16:37 2020 +0200

    Fix signature parameter binding for nested variables of any type.

    This change fixes the corner case in the signature parameters binding
    when the type variable constraint is a type variable of any type, has
    the variable arity > 1 and used as a nested param of the function param
    type signature. For example, the following declared signature

...skipping...
    This improvement may fix related existing performance regressions.

    Function implementations must carry the signature and also the signature
    must be streamable in order for this to work.

    We carry now both, a `FunctionIdent` and a `Signature` all through the
    code base to be able to still support the old registry to migrate
    all functions iterative.
    Eventually the `FunctionInfo` (and `FunctionIdent`) should be replaced
    by a `Signature` after all functions are migrated.

commit 14846d49b65a2ac7b6dcb4597534bc20052c4a24
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Wed Apr 22 16:52:34 2020 +0200

    Migrate InformationPartitionsTableInfo to SystemTable

--------------------------------------------------------------------------------

commit f487fe74b5e00588a1a0548932e0cb315ed9513b
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Tue Apr 21 11:13:40 2020 +0200

    Migrate SysSegmentsTableInfo to SystemTable

commit cac0b6333e39fa99afa3a44868470b78e6a4656b
...skipping...
    This significantly improves the performance:

        Q: select min(obj['x']) from tbl where obj is not null
        C: 1
        | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max |
        |   V1    |     8134.572 ± 5422.497 |    294.628 |  11127.396 |  11463.783 |  12676.666 |
        |   V2    |       87.163 ±   17.929 |     51.363 |     80.865 |    100.901 |    107.858 |
        mean:   - 195.76%
        median: - 197.11%
        Likely significant

commit 8fdeb380f3d082c21e309ee36798e88582bb9b2b
Author: Mathias Fussenegger <f.mathias@zignar.net>
Date:   Thu Apr 2 11:26:40 2020 +0200

    Fix some raw type warnings